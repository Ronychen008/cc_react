(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;

	const NoFlags = 0b00000000000000000000000000;
	const Placement = 0b00000000000000000000000001;
	const Update = 0b00000000000000000000000010;
	const ChildDeletion = 0b000000000000000000000000100;
	const MutationMask = Placement | Update | ChildDeletion;

	class FiberNode {
	    tag;
	    key;
	    stateNode;
	    type;
	    ref;
	    return;
	    sibling;
	    child;
	    index;
	    pendingProps; // 工作前的props
	    memoizedProps; // 工作后保存的props
	    memoizedState;
	    alternate; // workInProgress fiberNode与current fiberNode之间的关联指针，即 workInProgress fiberNode.alternate =current fiberNode
	    flags;
	    subtreeFlags;
	    updateQueue;
	    constructor(tag, pendingProps, key) {
	        // 实例属性
	        this.tag = tag;
	        this.key = key;
	        this.stateNode = null;
	        this.type = null;
	        // 构成树状结构，表示节点关系的属性
	        this.return = null; // 指向父fiberNode
	        this.sibling = null; // 指向兄弟fiberNode
	        this.child = null; // 指向子fiberNode
	        this.index = 0;
	        this.ref = null;
	        // 作为工作单位
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.memoizedState = null;
	        this.updateQueue = null;
	        this.alternate = null;
	        // 副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	// 创建FiberRootNode的构造函数
	class FiberRootNode {
	    container;
	    current; // 指向hostRootFiber
	    finishedWork; // 最终递归完后的hostRootFiber
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	// 创建workInProgress
	function createWorkInProgress(current, pendingProps) {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount阶段
	        // 需要新建一个 FiberNode
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update阶段
	        wip.pendingProps = pendingProps;
	        // 清除副作用，因为可能是上次更新遗留的
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    wip.ref = current.ref;
	    return wip;
	}
	// 根据element创建fiberNode
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('createFiberFromElement', '未定义的 type 类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	/**
	 * Update 实例化方法
	 * @param action
	 * @returns
	 */
	function createUpdate(action) {
	    return {
	        action
	    };
	}
	/**
	 * UpdateQueue 实例化方法
	 * @returns
	 */
	function createUpdateQueue() {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	}
	/**
	 * 往 updateQueue 中添加一个update
	 * @param updateQueue
	 * @param update
	 */
	function enqueueUpdate(updateQueue, update) {
	    // // 支持存放多个 update
	    // const pending = updateQueue.shared.pending;
	    // if (pending === null) {
	    // 	// pending -> a -> a a和自己形成环状链表
	    // 	update.next = update;
	    // } else {
	    // 	// pending -> b -> a -> b
	    // 	// pending -> c -> a -> b -> c
	    // 	update.next = pending.next;
	    // 	pending.next = update;
	    // }
	    updateQueue.shared.pending = update;
	    // pending 始终指向最后一个 update
	    // pending.next 就能拿到第一个 update
	}
	/**
	 * updateQueue 消费 update
	 * @param baseState 初始状态
	 * @param pendingUpdate 消费的 update
	 * @returns 全新的状态
	 */
	function processUpdateQueue(baseState, pendingUpdate) {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            // 函数形式的更新setState((oldState)=>4(oldState))
	            // baseState 1 update (x) => 4x -> memoizedState 4
	            result.memoizedState = action(baseState);
	        }
	        else {
	            // 直接对像形式的更新setState({xxx:2})
	            // baseState 1 update 2 -> memoizedState 2
	            result.memoizedState = action;
	        }
	    }
	    return result;
	}

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function ChildReconciler(shouldTrackEffects) {
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        // 根据element创建fiber
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断当前fiber的类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // TODO 多节点的情况 ul> li*3
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	// 递归中的递阶段
	/**
	 * 在beginwork中更新副作用只会标记两类结构变化相关的flags：Placement、ChildDeletion
	 * @returns
	 */
	const beginWork = (wip) => {
	    // 比较 + 返回子FiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            // 文本节点没有子节点，因此‘递’到底了
	            return null;
	        // case FunctionComponent:
	        // 	return updateFunctionComponent(wip, renderLane);
	        // case Fragment:
	        // 	return updateFragment(wip);
	        default:
	            {
	                console.warn('(beginWork)', '未实现的类型', wip);
	            }
	    }
	    return null;
	};
	// 对于 HostRoot
	// 1. 计算状态最新值
	// 2. 创建子 fiberNode
	function updateHostRoot(wip) {
	    // 首屏渲染时不存在
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    // 已经开始计算了，计算完成后 pending 就没有用了
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    // 最新状态，也就是传入的 ReactElement
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    // 对于 HostComponent，不会触发更新
	    // 1. 创建子 fiberNode
	    // children 从 react element 的 props 中取
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    // 获取父节点的 current fiberNode 来对比，返回 wip 的子 fiberNode
	    const current = wip.alternate;
	    if (current !== null) {
	        // 首次渲染过程中，只有 HostRoot 会走到这里
	        // 因为在 renderRoot 时，通过创建 wip，使得它是唯一的存在 wip 和 current 的 fiberNode
	        // 更新
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // 首次渲染
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	const createInstance = (type) => {
	    // TODO 处理props
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	/* eslint-disable @typescript-eslint/no-explicit-any */
	// 递归中的归阶段
	/**
	 *需要解决的问题:
	 1、对于Host类型的fiberNode：构建离屏dom树
	 2、标记update flags
	 */
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && current.stateNode) ;
	            else {
	                // mount
	                // 构建离屏 DOM，同时记录 props 到 DOM 上
	                const instance = createInstance(wip.type); //dom节点
	                // 将子 fiber 创建好的 DOM 插入到 dom树 中
	                appendAllChildren(instance, wip);
	                // 将当前插入完成的更大的 DOM 树位置记录在 FiberNode 中
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && current.stateNode) ;
	            else {
	                // 构建离屏 DOM
	                const instance = createTextInstance(newProps.content);
	                // hostText 不存在 child，不需要挂载
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('(completeWork)', ': 未处理的 CompleteWork 情况');
	            }
	    }
	};
	function appendAllChildren(parent, wip) {
	    // 插入的应该是组件中的实际节点
	    // 比如对于函数组件，应该插入的是函数组件中经过递归找到的实际的节点
	    let node = wip.child;
	    while (node !== null) {
	        if (node?.tag === HostComponent || node?.tag === HostText) {
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node?.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node?.sibling === null) {
	            if (node?.return === null || node?.return === wip) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        // 向下遍历
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            // 要么没有子节点，要么子节点没有 flags
	            // 向上遍历
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	function commitMutationEffectsOnFiber(finishedWork) {
	    // 这个finishedWork是真正存在flags
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        // 将 Placement 标记从 flags 中移除
	        finishedWork.flags &= ~Placement;
	    }
	}
	function commitPlacement(finishedWork) {
	    {
	        console.warn('(commitPlacement)', '执行 Placement 操作', finishedWork);
	    }
	    // 找到最近的父级 host 节点
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	}
	// 获取宿主环境parent节点
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent !== null) {
	        const parentTag = parent.tag;
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('(getHostParent)', '未找到宿主节点', fiber);
	    }
	    return null;
	}
	/**
	 *将palcement对应的node append到container中
	 */
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	let workInProgress = null; // 指向当前正在工作的fiberNode节点
	/**
	 * 初始化，让 wip 指向需要遍历的第一个 fiberNode
	 * @param root
	 */
	function prepareFreshStack(root) {
	    //root就是最顶层的fiberRootNode
	    workInProgress = createWorkInProgress(root.current, {});
	}
	/**
	 * 连接 renderRoot 的更新流程
	 * @param fiber
	 */
	function scheduleUpdateOnFiber(fiber) {
	    // 对于首屏渲染时穿进来的fiber是hostRootFiber,但对于其他组件中setState时传进来的fiber是当前要执行更新的组件
	    // 触发更新未必从根节点，所以向上一直找到 fiberRootNode
	    const root = markUpdateFromFiberToRoot(fiber); // 这个root=fiberRootNode
	    renderRoot(root);
	}
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    // 正常的 fiberNode 都有 return 但是 hostRootFiber 没有 return
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    // 初始化
	    prepareFreshStack(root);
	    do {
	        try {
	            // shouldTimeSlice ? workLoopConcurrent() : workLoopSync();
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('(performSyncWorkOnRoot)', 'workLoop 发生错误', e);
	            }
	            workInProgress = null;
	        }
	        // eslint-disable-next-line no-constant-condition
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    commitRoot(root);
	}
	function commitRoot(root) {
	    console.log(root);
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null)
	        return;
	    {
	        console.warn('commit阶段开始', finishedWork);
	    }
	    // 重置
	    root.finishedWork = null;
	    // 判断是否存在3个子阶段需要执行的操作(首屏渲染主要就是placement操作，所以这里只考虑mutation阶段)
	    const subtreeHasEffects = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffects || rootHasEffect) {
	        // before mutation
	        // mutation
	        commitMutationEffects(finishedWork);
	        // fiber 树切换
	        root.current = finishedWork;
	        // // layout
	        // commitLayoutEffects(finishedWork, root);
	    }
	    else {
	        // fiber 树切换
	        root.current = finishedWork;
	    }
	}
	// 工作循环
	function workLoop() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    // 这个beginWork方法就是实现了有子节点，就遍历子节点的逻辑
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    // 说明没有子节点了，要执行归阶段
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	// 这个就是为了实现没有子节点遍历兄弟节点逻辑
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        // 完成当前节点的“归”阶段
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            // 别着急 complete，先返回，开启兄弟节点的“递”阶段
	            return;
	        }
	        // 完成父节点的“归”阶段
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}

	// mount 时调用的 API
	// ReactDOM.createRoot(container).render(reactElement)
	/**
	 * 执行 createRoot 后，方法内部会调用 createContainer
	 * @param container // 就是传入的那个根dom节点div #root
	 * @returns
	 */
	function createContainer(container) {
	    // 创建两者，并关连
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	/**
	 * 执行 render 后，方法内部会调用 updateContainer
	 * @param element
	 * @param root
	 * @returns
	 */
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    // 创建更新
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    // 调度更新，连接 container 和 renderRoot 的更新流程
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	// ReactDOM.createRoot(root).render(element)
	function createRoot(container) {
	    // Container就是你要挂载的容器dom
	    const root = createContainer(container); // 这个root是FiberRootNode最顶层的那个
	    return {
	        render(element) {
	            // 传入的jsx ReactElement
	            return updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
